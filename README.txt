Varnish recipe for buildout
===========================

plone.recipe.varnish is a `zc.buildout`_ recipe to install `Varnish`_. Even
though the name contains the name Plone, there is nothing Plone specific about
this recipe: it works for non-Zope sites just as well.

Configuring it is very simple. For example::

    [varnish-build]
    recipe = zc.recipe.cmmi
    url = ${varnish:download-url}

    [varnish]
    recipe = plone.recipe.varnish
    daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
    bind = 127.0.0.1:8000
    backends = 127.0.0.1:8080
    cache-size = 256M

This configures two buildout parts: ``varnish-build`` which will download,
compile and install varnish, and ``varnish`` which runs Varnish, configured to
listen on 127.0.0.1:8000 for requests, using a 256 megabyte cache and sending
requests to a backend at 127.0.0.1:8080.

Wrappers for all the varnish commands are created in the bin directory of your
buildout.

Please note that the configuration generated by this recipe requires Varnish
2.0.3 or later. The ``download-url`` provided by the recipe points to the
latest tested Varnish release compatible with the generated configuration.


Virtual hosting
---------------

Varnish supports virtual hosting by selecting a different backend server
based on headers on the incoming request. You can configure the backends
through the backends option::

  [varnish-instance]
  backends =
     plone.org:127.0.0.1:8000
     plone.net:127.0.0.1:9000

This will generate a configuration which sends all traffic for the plone.org
host to a backend server running on port 8000 while all traffic for the
plone.net host is send to port 9000.


Zope 2 hosting (with Virtual Host Monster)
------------------------------------------

If you are using Zope 2 as backend server you will need to rewrite the URL
so the Zope Virtual Host Monster (VHM) can generate correct links for links in
your pages. This can be done either by a web server such as Apache or nginx
(placed either in front or behind Varnish) but can also be done by Varnish itself.

The three options are described below.

Option 1 (rewrites after Varnish)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If generating these VHM-style URLs in a proxy *behind* Varnish (or if using
VHM's 'mapping' feature), no extra Varnish configuration is needed.
Just make sure the "backends" option directs the traffic to the proxy.

Option 2 (rewrites before Varnish)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If generating these VHM-style URLs in a proxy *in-front* of Varnish, no extra
Varnish configuration is needed as long as the original hostname is still retained
in the URL. If the hostname is not retained, you can tell Varnish to direct requests
based on the "path" instead of the hostname.  For example::

  [varnish-instance]
  backends =
    /VirtualHostBase/http/plone.org:80/Plone:127.0.0.1:8000
    /VirtualHostBase/http/plone.net:80/Plone:127.0.0.1:9000

This will generate a configuration which sends all traffic for any request whose
path starts with "/VirtualHostBase/http/plone.org:80/Plone" to a backend server
running at 127.0.0.1 on port 8000, while request paths starting with
"/VirtualHostBase/http/plone.net:80/Plone" are sent to port 9000.

Option 3 (rewrites within Varnish)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To have Varnish generate these VHM-style URLs, you can use the **zope2_vhm_map** option.
Here is an example::

  [varnish-instance]
  zope2_vhm_map =
      plone.org:/plone
      plone.net:/plone

This tells us that the domain plone.org should be mapped to the location
/plone in the backend. By combining this with the information from the
**backends** option a varnish configuration will be generated that
maps URLs correctly.

Load Balancing
--------------

Varnish supports load balancing by configuring a director for a pool of backends.
This director sends the incoming requests that cannot be fulfulled by varnish to
backends in the pool in either random or round robin fashion. You can configure
the director via the balancer option::

  [varnish-instance]
  balancer = random

This will generate a configuration which sends all traffic to the director,
which will choose a 'random' backend server to fulfill the request if the
content requested is not cached by varnish itself.


plone.recipe.varnish reference
------------------------------

The plone.recipe.varnish recipe create a Varnish configuration file and creates
a wrapper script inside your buildout that will start Varnish with the correct
configuration.

Please note that the configuration generated by this recipe requires Varnish
2.0.3 or later.

Please note that in order to use this recipe with varnish >= 3.0,
varnish_version option must be set to 3

It can be configured with any of these options:

varnish_version
    Varnish target version. Default is ``2``.

daemon
    The path of the varnish daemon to use. Set this to the ``sbin/varnishd``
    executable created by the ``zc.recipe.cmmi`` build.

mode
    Specify whether the varnish daemon should run in 'daemon' or
    'foreground' mode.  The latter is useful when varnish is run by service
    supervision tools like daemontools or runit. Defaults to 'daemon'.

cache-type

    Specify the type of cache storage to use with Varnish.  Possible values: 
    **file** (storage for each object is allocated from an arena backed by a file),
    **malloc** (storage for each object is allocated with malloc; in memory),
    or **persistent** (experimental as at Varnish 2.1.4). Defaults to 'file'.

cache-location

    Customise the location for the Varnish file storage.  Option only applicable 
    when used with **file** or **persistent** cache-type options.  Defaults to 
    using a file named ``storage`` inside the relevant parts directory 
    (eg ``parts/varnish/storage``).  Changing the default location can be
    useful in putting the storage somewhere with quicker read speeds (RAM
    disk etc).

cache-size
    The size of the cache (limited to 2G on 32bit systems). Defaults to
    256M.

bind
    Hostname and port on which Varnish will listen for requests. Defaults
    to 127.0.0.1:8000.

config
    Path for a Varnish VCL configuration to use. If you use this option
    you can not use the backends, zope2_vhm_map or verbose-headers options .

backends
    Specifies the backend or backends which will process the (uncached)
    requests. The syntax for backends:

    [<hostname>][/<path>]:<ip address>:<port>

    The optional 'hostname' and 'path' allows you to do virtual hosting.
    If multiple backends are specified then each backend must include
    either a hostname or path (or both) so that Varnish can direct the
    matching request to the appropriate backend. Defaults to 127.0.0.1:8080.
    
purge-hosts
    Specifies hostnames or ip addresses for purge acl. By default localhost and
    the backends are allowed to purge. Additional allowed hosts are listed here.

name
    If specified this sets the name of the varnish instance (defaults to
    the host name).

    From varnishd's manpage:

      Amongst other things, this name is used to construct the name of the
      directory in which varnishd keeps temporary files and persistent state.
      If the specified name begins with a forward slash, it is interpreted as
      the absolute path to the directory which should be used for this purpose.

zope2_vhm_map
    Defines a virtual host mapping for Zope servers. This is a list of
    **hostname:ZODB location** entries which specify the location inside
    Zope where the website for a virtual host lives.

verbose-headers
    Varnish VCL configuration: a http-response header line  **X-Varnish-Action**
    is set for debugging purposes. It shows a hit, why it bypass/fetch from
    backend and if if the object was inserted into cache.
    Possible values: **on** or **off** (default).

telnet
    If specified sets the hostname and port on which Varnish will listen
    for commands using its telnet interface.

user
    The name of the user varnish should switch to before accepting any
    requests. Defaults to nobody.

group
    The name of the group varnish should switch to before accepting any
    request. This defaults to the main group for the specified user.

balancer
    If included and set to either 'random' or 'round-robin', this option
    configures varnish to load balance the servers specified by the 'backends'
    directive. Possible values: **none** (default), **round-robin** or
    **random**.

connect-timeout
    If specified, this option configures the connection timeout (in seconds)
    for Varnish connecting to a backend server. Varnish will only try to
    connect to a given backend for this many seconds before giving up. Defaults
    to 0.4s, as per Varnish's default settings.

first-byte-timeout
    If specified, this option configures the timeout (in seconds) for Varnish
    receiving the first byte from a backend. Varnish will only wait for this
    many seconds before giving up. A value of 0s means Varnish will never time
    out. Defaults to 300s, see
    http://vincentfretin.ecreall.com/articles/varnish-guru-meditation-on-timeout

between-bytes-timeout
    If specified, this option configures the timeout (in seconds) for Varnish
    waiting between bytes when receiving data from a backend. Varnish will only
    wait this many seconds between bytes before giving up. A value of 0s means
    this will never time out. Defaults to 60s, as per Varnish's default
    settings.

runtime-parameters
    Runtime parameter configuration options. The full list of available options
    can be found in the manpage varnishd(1) for your version of varnish.
    Examples include 'thread_pool_max', 'thread_pool_min', 'sess_timeout'.

vcl_recv, vcl_hit, vcl_miss, vcl_fetch, vcl_deliver, vcl_pipe
    Insert arbitrary vcl into the generated config.

.. _Varnish: http://varnish-cache.org/
.. _zc.buildout: http://cheeseshop.python.org/pypi/zc.buildout

