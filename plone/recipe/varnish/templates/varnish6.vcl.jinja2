# This a configuration file for varnish.
# It was generated by plone.recipe.varnish.
# See the vcl(7) man page for details on VCL syntax and semantics.
#
{% if comment %}
{{comment}}
{% endif %}
vcl {{vcl_version}};

import std;
{{custom['vcl_import']}}

{% if gracehealthy %}
probe backend_probe {
    .url = "{{healthprobeurl}}";
    .timeout = {{healthprobetimeout}};
    .interval = {{healthprobeinterval}};
    .window = {{healthprobewindow}};
    .threshold = {{healthprobethreshold}};
    {% if healthprobeinitial %}
    .initial = {{healthprobeinitial}};
    {% endif %}
}
{% endif %}

# configure all backends
{% for backend in backends %}
backend {{backend['name']}} {
   {% if backend['path'] and vcl_version == '4.1' %}
   .path = "{{backend['path']}}";
   {% else %}
   .host = "{{backend['host']}}";
   .port = "{{backend['port']}}";
   {% endif %}
   .connect_timeout = {{backend['connect_timeout']}};
   .first_byte_timeout = {{backend['first_byte_timeout']}};
   .between_bytes_timeout  = {{backend['between_bytes_timeout']}};
   {% if gracehealthy %}
   .probe = backend_probe;
    {% endif %}
}
{% endfor %}

{% if directors %}
import directors;
{% endif %}

sub vcl_init {
    {% if directors %}
    # configure directors for load balancing
    {% for director in directors %}

    new {{director['name']}} = directors.{{director['type']}}();
    {% for backend in director['backends'] %}
    {{director['name']}}.add_backend({{backend}});
    {% endfor %}{% endfor %}{% endif %}
    {{custom['vcl_init']}}
}

acl list_purge {
    "localhost";
    {% for purgehost in purgehosts %}
    "{{purgehost}}";
    {% endfor %}
}

sub vcl_recv {
    {{custom['vcl_recv']}}
    {% if vhosting|length > 1 %}
    # virtual hosting matches
    {% for vh in vhosting %}
    {% if loop.first %}
    if ({{vh['match']}}) {
    {% else %}
    } elseif ({{vh['match']}}) {
    {% endif %}
    {% for key, value in vh['setters'].items() %}
        set {{key}} = {{value}};
    {% endfor %}
    {% if loop.last %}{% if code404page %}
    } else {
        return (synth(404, "Unknown virtual host."));
    {% endif %}
    }
    {% endif %}
    {% endfor %}
    {% else %}
    {% for key, value in vhosting[0]['setters'].items() %}
    set {{key}} = {{value}};
    {% endfor %}
    {% endif %}

    if (req.method == "PURGE") {
        # Not from an allowed IP? Then die with an error.
        if (!client.ip ~ list_purge) {
            return (synth(405, "This IP is not allowed to send PURGE requests."));
        }
        return(purge);
    }

    if (req.method == "BAN") {
            # Same ACL check as above:
            if (!client.ip ~ list_purge) {
            return(synth(403, "Not allowed."));
            }
            #ban("req.url ~ " + req.url);
        ban("req.http.host == " + req.http.host +
            " && req.url == " + req.url);
            # Throw a synthetic page so the
            # request won't go to the backend.
            return(synth(200, "Ban added"));
    }

    # Only deal with "normal" types
    if (req.method != "GET" &&
           req.method != "HEAD" &&
           req.method != "PUT" &&
           req.method != "POST" &&
           req.method != "TRACE" &&
           req.method != "OPTIONS" &&
           req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return(pipe);
    }

    # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
    if (req.method != "GET" && req.method != "HEAD") {
        return(pass);
    }

    if (req.http.Expect) {
        return(pipe);
    }

    if (req.http.If-None-Match && !req.http.If-Modified-Since) {
        return(pass);
    }

    /* Do not cache other authorized content by default */
    if (req.http.Authenticate || req.http.Authorization) {
        return(pass);
    }
    {% if cookiepass|length > 0 %}

    /* cookies for pass */
    {% for rule in cookiepass %}
    {# this part need review #}
    set req.http.UrlNoQs = regsub(req.url, "\?.*$", "");
    if (req.http.Cookie && req.http.Cookie ~ "{{rule['match']}}") {
        if (req.http.UrlNoQs ~ "{{rule['exclude']}}") {
            unset req.http.cookie;
            return(pipe);
        }
        return(pass);
    }
    {% endfor %}
    {% endif %}
    {% if cookiewhitelist|length > 0 %}

    /* Cookie whitelist, remove all not in there */
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";({% for name in cookiewhitelist %}{{name}}{% if not loop.last %}|{% endif %}{% endfor %})=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
    }
    {% endif %}


    # Large static files should be piped, so they are delivered directly to the end-user without
    # waiting for Varnish to fully read the file first.

    # TODO: make this configureable.

    if (req.url ~ "^[^?]*\.(mp3|mp4|rar|tar|tgz|gz|wav|zip)(\?.*)?$") {
        return(pipe);
    }

    return(hash);
}

sub vcl_pipe {
    {{custom['vcl_pipe']}}
    # By default Connection: close is set on all piped requests, to stop
    # connection reuse from sending future requests directly to the
    # (potentially) wrong backend. If you do want this to happen, you can undo
    # it here.
    # unset bereq.http.connection;

    return(pipe);
}

sub vcl_pass {
    {{custom['vcl_pass']}}
    return (fetch);
}

sub vcl_hash {
    {{custom['vcl_hash']}}
}

sub vcl_purge {
    {{custom['vcl_purge']}}
    return (synth(200, "Purged"));
}

sub vcl_hit {
    {{custom['vcl_hit']}}
    if (obj.ttl >= 0s) {
        // A pure unadultered hit, deliver it
        # normal hit
        return (deliver);
    }

    {% if gracehealthy %}
    # We have no fresh fish. Lets look at the stale ones.
    if (std.healthy(req.backend_hint)) {
        # Backend is healthy. Limit age to 10s.
        if (obj.ttl + {{gracehealthy}} > 0s) {
            set req.http.grace = "normal(limited)";
            return (deliver);
        } else {
            # No candidate for grace. Fetch a fresh object.
            return(miss);
        }
    } else {
        # backend is sick - use full grace
        // Object is in grace, deliver it
        // Automatically triggers a background fetch
        if (obj.ttl + obj.grace > 0s) {
            set req.http.grace = "full";
            return (deliver);
        } else {
            # no graced object.
            return (miss);
        }
    }
    {% endif %}

    if (req.method == "PURGE") {
        set req.method = "GET";
        set req.http.X-purger = "Purged";
        return(synth(200, "Purged. in hit " + req.url));
    }

    // fetch & deliver once we get the result
    return (miss); # Dead code, keep as a safeguard
}

sub vcl_miss {
    {{custom['vcl_miss']}}

    if (req.method == "PURGE") {
        set req.method = "GET";
        set req.http.X-purger = "Purged-possibly";
        return(synth(200, "Purged. in miss " + req.url));
    }

    // fetch & deliver once we get the result
    return (fetch);
}

sub vcl_backend_fetch{
    {{custom['vcl_backend_fetch']}}
    return (fetch);
}

sub vcl_backend_response {
    {{custom['vcl_backend_response']}}

    # The object is not cacheable
    if (beresp.http.Set-Cookie) {
        set beresp.http.X-Cacheable = "NO - Set Cookie";
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
    } elsif (beresp.http.Cache-Control ~ "private") {
        set beresp.http.X-Cacheable = "NO - Cache-Control=private";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
    } elsif (beresp.http.Surrogate-control ~ "no-store") {
        set beresp.http.X-Cacheable = "NO - Surrogate-control=no-store";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
    } elsif (!beresp.http.Surrogate-Control && beresp.http.Cache-Control ~ "no-cache|no-store") {
        set beresp.http.X-Cacheable = "NO - Cache-Control=no-cache|no-store";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
    } elsif (beresp.http.Vary == "*") {
        set beresp.http.X-Cacheable = "NO - Vary=*";
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;


    # ttl handling
    } elsif (beresp.ttl < 0s) {
        set beresp.http.X-Cacheable = "NO - TTL < 0";
        set beresp.uncacheable = true;
    } elsif (beresp.ttl == 0s) {
        set beresp.http.X-Cacheable = "NO - TTL = 0";
        set beresp.uncacheable = true;

    # Varnish determined the object was cacheable
    } else {
        set beresp.http.X-Cacheable = "YES";
    }

    # Do not cache 5xx errors
    if (beresp.status >= 500 && beresp.status < 600) {
        unset beresp.http.Cache-Control;
        set beresp.http.X-Cache = "NOCACHE";
        set beresp.http.Cache-Control = "no-cache, max-age=0, must-revalidate";
        set beresp.ttl = 0s;
        set beresp.http.Pragma = "no-cache";
        set beresp.uncacheable = true;
        return(deliver);
    }

    # TODO this one is very plone specific and should be removed, not sure if its needed any more
    if (bereq.url ~ "(createObject|@@captcha)") {
        set beresp.uncacheable = true;
        return(deliver);
    }
    {% if gracehealthy %}

    set beresp.grace = {{gracesick}};
    {% endif %}

    return (deliver);
}

sub vcl_deliver {
    set resp.http.grace = req.http.grace;
    if (obj.hits > 0) {
         set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
    /* Rewrite s-maxage to exclude from intermediary proxies
      (to cache *everywhere*, just use 'max-age' token in the response to avoid
      this override) */
    if (resp.http.Cache-Control ~ "s-maxage") {
        set resp.http.Cache-Control = regsub(resp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");
    }
    /* Remove proxy-revalidate for intermediary proxies */
    if (resp.http.Cache-Control ~ ", proxy-revalidate") {
        set resp.http.Cache-Control = regsub(resp.http.Cache-Control, ", proxy-revalidate", "");
    }
    {{custom['vcl_deliver']}}
}

/*
 We can come here "invisibly" with the following errors: 413, 417 & 503
*/
sub vcl_synth {
    set resp.http.Content-Type = "text/html; charset=utf-8";
    set resp.http.Retry-After = "5";

    synthetic( {"
        <?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html>
          <head>
            <title>Varnish cache server: "} + resp.status + " " + resp.reason + {" </title>
          </head>
          <body>
            <h1>Error "} + resp.status + " " + resp.reason + {"</h1>
            <p>"} + resp.reason + {"</p>
            <h3>Guru Meditation:</h3>
            <p>XID: "} + req.xid + {"</p>
            <hr>
            <p>Varnish cache server</p>
          </body>
        </html>
    "} );

    return (deliver);
}
